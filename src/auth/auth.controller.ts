import {
  Body,
  Controller,
  Get,
  Post,
  Put,
  UseGuards,
} from '@nestjs/common';
import { AuthDto } from './dtos/auth.dto';
import { AuthService } from './auth.service';
import { JwtAuthGuard } from './jwt/jwt-auth/jwt-auth.guard';
import { CurrentUser } from '../common/decorators/current-user.decorator';
import { UserEntity } from './entities/user.entity';
import { ApiBearerAuth, ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';
import { PinDto } from './dtos/pin.dto';

@ApiTags('Authentication') // üìå –î–æ–±–∞–≤–ª—è–µ–º Swagger-—Ç–µ–≥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('login')
  @ApiOperation({ summary: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiBody({ type: AuthDto })
  @ApiResponse({ status: 200, description: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' })
  @ApiResponse({ status: 401, description: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
  login(@Body() payload: AuthDto) {
    return this.authService.validateUser(payload);
  }

  @Put('refresh-token')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access/refresh —Ç–æ–∫–µ–Ω–∞' })
  @ApiBearerAuth() // üìå –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è Bearer-—Ç–æ–∫–µ–Ω
  @ApiBody({
    schema: {
      example: { refreshToken: 'your-refresh-token' },
    },
  })
  @ApiResponse({ status: 200, description: '–ù–æ–≤—ã–π access –∏ refresh —Ç–æ–∫–µ–Ω' })
  @ApiResponse({ status: 401, description: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token' })
  async refreshToken(@Body() body: { refreshToken: string }, @CurrentUser() user: UserEntity) {
    return this.authService.refreshTokens(user.id, body.refreshToken);
  }

  @Get('me')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiBearerAuth() // üìå –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (JWT)
  @ApiResponse({ status: 200, description: '–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', type: UserEntity })
  @ApiResponse({ status: 401, description: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' })
  getCurrentUser(@CurrentUser() user: UserEntity) {
    return user;
  }

  @Post('pin')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–ü—Ä–æ–≤–µ—Ä–∫–∞ 6-–∑–Ω–∞—á–Ω–æ–≥–æ PIN-–∫–æ–¥–∞' })
  @ApiResponse({ status: 200, description: 'PIN-–∫–æ–¥ –≤–µ—Ä–Ω—ã–π' })
  @ApiResponse({ status: 400, description: 'PIN-–∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π' })
  checkPinCode(@Body() pinDto: PinDto, @CurrentUser() user: UserEntity) {
    return this.authService.checkPin(user, pinDto.pin);
  }

}