import {
  Injectable,
  UnauthorizedException,
  HttpException,
  HttpStatus,
  BadRequestException,
} from '@nestjs/common';
import { AuthDto, DolibarrLoginResponse } from './dtos/auth.dto';
import { HttpService } from '@nestjs/axios';
import { firstValueFrom } from 'rxjs';
import { DolibarrUserResponse } from './dtos/dolibarrUserResponse.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { UserEntity } from './entities/user.entity';
import { Repository } from 'typeorm';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcryptjs';
import * as process from 'node:process';

@Injectable()
export class AuthService {
  constructor(
    private readonly http: HttpService,
    private readonly jwtService: JwtService,
    @InjectRepository(UserEntity)
    private readonly userRepository: Repository<UserEntity>,
  ) {}

  /** üîπ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤ */
  async validateUser(payload: AuthDto) {
    const dolibarrTokenData = await this.validateDolibarrAccount(payload);
    const dolibarrUserData = await this.findCurrentUserFromDolibarr(
      payload.username,
      dolibarrTokenData.success.token,
    );

    let user = await this.findUserInDB(dolibarrUserData.id);
    if (!user) {
      user = await this.createUserInDB(dolibarrUserData);
    }

    const tokens = this.generateTokens(user);
    await this.updateRefreshToken(user.id, tokens.refresh_token);

    return {
      dolibarrKey: dolibarrTokenData.success.token,
      access_token: tokens.access_token,
      refresh_token: tokens.refresh_token,
      isExistPin: !!user.pin,
    };
  }

  /** üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç Dolibarr */
  private async validateDolibarrAccount(
    payload: AuthDto,
  ): Promise<DolibarrLoginResponse> {
    try {
      const { data } = await firstValueFrom(
        this.http.get<DolibarrLoginResponse>(
          `${process.env.DOLIBARR_API}/login?login=${payload.username}&password=${payload.password}`,
        ),
      );
      return data;
    } catch (error) {
      throw new UnauthorizedException('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Dolibarr');
    }
  }

  /** üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Dolibarr –ø–æ –ª–æ–≥–∏–Ω—É */
  private async findCurrentUserFromDolibarr(
    login: string,
    doliApiKey: string,
  ): Promise<DolibarrUserResponse> {
    try {
      const { data } = await firstValueFrom(
        this.http.get<DolibarrUserResponse>(
          `${process.env.DOLIBARR_API}/users/login/${login}`,
          {
            headers: { DOLAPIKEY: doliApiKey },
          },
        ),
      );
      return data;
    } catch (error) {
      throw new HttpException(
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Dolibarr',
        HttpStatus.NOT_FOUND,
      );
    }
  }

  /** üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î */
  private async createUserInDB(
    data: DolibarrUserResponse,
  ): Promise<UserEntity> {
    const newUser = this.userRepository.create({
      dolibarrUserId: data.id,
      username: data.login,
    });

    return await this.userRepository.save(newUser);
  }

  /** üîπ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ dolibarrUserId */
  private async findUserInDB(
    dolibarrUserId: string,
  ): Promise<UserEntity | null> {
    return await this.userRepository.findOne({ where: { dolibarrUserId } });
  }

  /** üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–æ–≤ (access –∏ refresh) */
  private generateTokens(user: UserEntity) {
    const payload = { sub: user.id, username: user.username };

    return {
      access_token: this.jwtService.sign(payload, {
        secret: process.env.JWT_SECRET,
        expiresIn: '15m',
      }),
      refresh_token: this.jwtService.sign(payload, {
        secret: process.env.JWT_SECRET,
        expiresIn: '365d',
      }),
    };
  }

  /** üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ refresh_token –≤ –ë–î */
  private async updateRefreshToken(userId: string, refreshToken: string) {
    const hashedToken = await bcrypt.hash(refreshToken, 8);
    await this.userRepository.update(userId, { refresh_token: hashedToken });
  }

  /** üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ refresh_token */
  async refreshTokens(oldRefreshToken: string) {
    const payload: { sub: string } = this.jwtService.verify(oldRefreshToken, {
      secret: process.env.JWT_SECRET,
    });

    const user = await this.userRepository.findOne({
      where: { id: payload.sub },
    });

    if (!user || !user.refresh_token) {
      throw new UnauthorizedException('Invalid refresh token');
    }

    const isMatch = await bcrypt.compare(oldRefreshToken, user.refresh_token);
    if (!isMatch) {
      throw new UnauthorizedException('Invalid refresh token');
    }

    const tokens = this.generateTokens(user);
    await this.updateRefreshToken(user.id, tokens.refresh_token);

    return {
      access_token: tokens.access_token,
      refresh_token: tokens.refresh_token,
    };
  }

  /** üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ PIN-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  async checkPin(user: UserEntity, pin: string) {
    const foundUser = await this.userRepository.findOne({
      where: { id: user.id },
      select: ['id', 'pin'], // üëà –Ø–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º PIN
    });

    if (!foundUser) {
      throw new BadRequestException('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!foundUser.pin) {
      return await this.setPin(foundUser.id, pin);
    }

    const isMatch = await bcrypt.compare(pin, foundUser.pin);
    if (!isMatch) {
      throw new BadRequestException('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥');
    }

    return { message: '‚úÖ PIN-–∫–æ–¥ –≤–µ—Ä–Ω—ã–π' };
  }

  /** üîπ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PIN-–∫–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç */
  async setPin(userId: string, pin: string) {
    if (!/^\d{6}$/.test(pin)) {
      throw new BadRequestException('‚ùå PIN-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 6 —Ü–∏—Ñ—Ä');
    }

    const user = await this.userRepository.findOne({
      where: { id: userId },
      select: ['id', 'pin'], // üëà –Ø–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º PIN
    });

    if (!user) {
      throw new BadRequestException('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (user.pin) {
      throw new BadRequestException('‚ùå PIN-–∫–æ–¥ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    const hashedPin = await bcrypt.hash(pin, 8);

    await this.userRepository.update(userId, {
      pin: hashedPin,
    });

    return {
      message: '‚úÖ PIN-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
    };
  }

  async getUserFromDolibarr(user: UserEntity, req: Request) {
    const headers = req.headers;
    const { data } = await firstValueFrom(
      this.http.get<DolibarrLoginResponse>(
        `${process.env.DOLIBARR_API}/users/${user.dolibarrUserId}`,
        {
          headers: {
            // @ts-ignore
            DOLAPIKEY: headers.dolapikey
          }
        },
      ),
    );

    console.log(data)

    return data;
  }
}
